import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.linear_model import LinearRegression

st.set_page_config(page_title="Data Analysis and ML App", layout="wide")
st.title("Data Analysis and Machine Learning Application")
#---- File Upload ----#
st.sidebar.header("Upload your Excel data")
uploaded_file = st.sidebar.file_uploader("Upload your input Excel file", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.header("Xem d·ªØ li·ªáu th√¥")
    st.dataframe(df.head())
    st.subheader("üìä Th√¥ng tin c·ªôt d·ªØ li·ªáu")   
    st.write(f"üëâ D·ªØ li·ªáu c√≥ {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")
    dtypes_df = df.dtypes.astype(str).reset_index()
    dtypes_df.columns = ["C·ªôt", "Ki·ªÉu d·ªØ li·ªáu"]
    st.dataframe(dtypes_df)

    #Ki·ªÉm tra gi√° tr·ªã thi·∫øu
    st.subheader("***Ki·ªÉm tra gi√° tr·ªã thi·∫øu***")
    describe_null = df.isnull().sum().reset_index()
    describe_null.columns = ["C·ªôt", "S·ªë gi√° tr·ªã thi·∫øu"]
    st.dataframe(describe_null)
    # Th·ªëng k√™ m√¥ t·∫£ c∆° b·∫£n
    st.subheader("üìà M√¥ t·∫£ d·ªØ li·ªáu (describe)")
    st.write(df.describe(include="all").transpose())
    st.subheader("üìä Th·ªëng k√™ m√¥ t·∫£")
    desc = df[["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)", "Doanh thu"]].describe()
    st.dataframe(desc)
    mean_value = df["Doanh thu"].mean()
    median_value = df["Doanh thu"].median()
    st.write(f"üëâ Mean Doanh thu: {mean_value} VND")
    st.write(f"üëâ Median Doanh thu: {median_value} VND")

    #--- 3. Histogram Doanh thu ---
    st.header("Histogram Doanh thu- Ph√¢n ph·ªëi Doanh thu")
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.histplot(df["Doanh thu"], bins=30, kde=True, ax=ax)
    ax.axvline(mean_value, color="red", linestyle="--", label=f"Mean = {mean_value:,.0f}")
    ax.axvline(median_value, color="green", linestyle="--", label=f"Median = {median_value:,.0f}")
    ax.set_title("Ph√¢n ph·ªëi Doanh thu v·ªõi Mean v√† Median")
    ax.legend()
    st.pyplot(fig)
    #--- 4. Boxplot Doanh thu ---
    st.header("Boxplot Doanh thu - Ph√°t hi·ªán ngo·∫°i l·ªá")
    fig2, ax2 = plt.subplots(figsize=(8, 5))
    sns.boxplot(x=df["Doanh thu"], ax=ax2)
    ax2.set_title("Boxplot Doanh thu (Ph√°t hi·ªán ngo·∫°i l·ªá)")
    st.pyplot(fig2)
    #--- 5. Scatter plot S·ªë l∆∞·ª£ng vs Doanh thu ---
    st.header("Scatter plot S·ªë l∆∞·ª£ng vs Doanh thu")
    fig3, ax3 = plt.subplots(figsize=(8, 5))
    sns.scatterplot(x="S·ªë l∆∞·ª£ng", y="Doanh thu", data=df, ax=ax3)
    ax3.set_title("S·ªë l∆∞·ª£ng vs Doanh thu")
    st.pyplot(fig3)
    #--- 6. Bar chart - Doanh thu theo khu v·ª±c ---
    st.header("Bar chart - Doanh thu theo khu v·ª±c")
    revenue_by_region = df.groupby("Khu v·ª±c")["Doanh thu"].sum().reset_index()
    fig4, ax4 = plt.subplots(figsize=(8, 5))
    sns.barplot(x="Khu v·ª±c", y="Doanh thu", data=revenue_by_region, ax=ax4)
    ax4.set_title("T·ªïng Doanh thu theo Khu v·ª±c")
    st.pyplot(fig4)
    #--- 7. Line chart - Doanh thu theo th·ªùi gian ---
    st.header("Line chart - Doanh thu theo th·ªùi gian")
    df["Ng√†y"] = pd.to_datetime(df["Ng√†y"], errors='coerce')
    revenue_over_time = df.groupby("Ng√†y")["Doanh thu"].sum().reset_index()
    fig5, ax5 = plt.subplots(figsize=(10, 5))
    sns.lineplot(x="Ng√†y", y="Doanh thu", data=revenue_over_time, ax=ax5)
    ax5.set_title("T·ªïng Doanh thu theo Th·ªùi gian")
    st.pyplot(fig5)
    # --- 9. D·ª± ƒëo√°n Doanh thu b·∫±ng sklearn ---
    st.header("9Ô∏è‚É£ D·ª± ƒëo√°n Doanh thu (Machine Learning)")

    # Ch·ªçn c√°c c·ªôt ƒë·ªÉ d·ª± b√°o
    X = df[["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)", "Danh m·ª•c", "Nh√† cung c·∫•p", "Khu v·ª±c", "Kh√°ch h√†ng", "Ph∆∞∆°ng th·ª©c thanh to√°n"]]
    y = df["Doanh thu"]

    # X·ª≠ l√Ω bi·∫øn categorical
    categorical_cols = ["Danh m·ª•c", "Nh√† cung c·∫•p", "Khu v·ª±c", "Kh√°ch h√†ng", "Ph∆∞∆°ng th·ª©c thanh to√°n"]
    numeric_cols = ["S·ªë l∆∞·ª£ng", "Gi√°", "Gi·∫£m gi√° (%)"]

    preprocessor = ColumnTransformer(
        transformers=[
            ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_cols),
            ("num", StandardScaler(), numeric_cols)
        ]
    )

    # Pipeline m√¥ h√¨nh
    model = Pipeline(steps=[
        ("preprocessor", preprocessor),
        ("regressor", LinearRegression())
    ])

    #    model = Pipeline(steps=[
    #     ("preprocessor", preprocessor),
    #     ("regressor", RandomForestRegressor(n_estimators=100, random_state=42))
    # ])


    # Chia train/test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Hu·∫•n luy·ªán
    model.fit(X_train, y_train)

    # ƒê√°nh gi√°
    y_pred = model.predict(X_test)
    
    # --- Form nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n ---
    st.subheader("üîÆ Th·ª≠ nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n Doanh thu")

    col1, col2 = st.columns(2)
    with col1:
        so_luong_in = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, max_value=100, value=5)
        gia_in = st.number_input("Gi√° s·∫£n ph·∫©m (VND)", min_value=1000, max_value=50000000, value=2000000)
        giam_gia_in = st.slider("Gi·∫£m gi√° (%)", 0, 30, 5)
    with col2:
        danh_muc_in = st.selectbox("Danh m·ª•c", df["Danh m·ª•c"].unique())
        nha_cc_in = st.selectbox("Nh√† cung c·∫•p", df["Nh√† cung c·∫•p"].unique())
        khu_vuc_in = st.selectbox("Khu v·ª±c", df["Khu v·ª±c"].unique())
        khach_hang_in = st.selectbox("Kh√°ch h√†ng", df["Kh√°ch h√†ng"].unique())
        pttt_in = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", df["Ph∆∞∆°ng th·ª©c thanh to√°n"].unique())

    # T·∫°o dataframe input
    input_data = pd.DataFrame({
        "S·ªë l∆∞·ª£ng": [so_luong_in],
        "Gi√°": [gia_in],
        "Gi·∫£m gi√° (%)": [giam_gia_in],
        "Danh m·ª•c": [danh_muc_in],
        "Nh√† cung c·∫•p": [nha_cc_in],
        "Khu v·ª±c": [khu_vuc_in],
        "Kh√°ch h√†ng": [khach_hang_in],
        "Ph∆∞∆°ng th·ª©c thanh to√°n": [pttt_in]
    })

    # D·ª± ƒëo√°n
    y_pred_input = model.predict(input_data)[0]
    st.success(f"üìà Doanh thu d·ª± ƒëo√°n: {y_pred_input:,.0f} VND")
    # 2. BI·ªÇU ƒê·ªí ƒê∆Ø·ªúNG  "What-If" THEO S·ªê L∆Ø·ª¢NG
    # input_df = pd.DataFrame([input_data])
    input_df = input_data.copy()
    input_df = input_df[numeric_cols + categorical_cols]
    st.markdown("##### Ph√¢n t√≠ch n·∫øu thay ƒë·ªïi S·ªë l∆∞·ª£ng")
    
    # T·∫°o m·ªôt d·∫£i s·ªë l∆∞·ª£ng ƒë·ªÉ d·ª± ƒëo√°n, v√≠ d·ª• t·ª´ 1 ƒë·∫øn 50
    quantity_range = np.arange(max(1, so_luong_in - 20), so_luong_in + 20, 1)
    what_if_predictions = []
    
    # L·∫∑p qua t·ª´ng gi√° tr·ªã s·ªë l∆∞·ª£ng ƒë·ªÉ d·ª± ƒëo√°n
    for qty in quantity_range:
        temp_df = input_data.copy()
        temp_df['S·ªë l∆∞·ª£ng'] = qty
        pred = model.predict(temp_df)[0]
        what_if_predictions.append(pred)
        
    fig, ax = plt.subplots()
    ax.plot(quantity_range, what_if_predictions, marker='o', linestyle='--', label='Xu h∆∞·ªõng Doanh thu')
    # ƒê√°nh d·∫•u ƒëi·ªÉm d·ª± ƒëo√°n hi·ªán t·∫°i
    ax.plot(so_luong_in, y_pred_input, marker='*', markersize=15, color='red', label=f'D·ª± ƒëo√°n hi·ªán t·∫°i ({so_luong_in} sp)')
    ax.set_xlabel("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m")
    ax.set_ylabel("Doanh thu D·ª± ƒëo√°n (VND)")
    ax.legend()
    ax.grid(True)
    ax.ticklabel_format(style='plain', axis='y')
    st.pyplot(fig)
else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch d·ªØ li·ªáu.")